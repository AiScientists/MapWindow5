//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//[assembly: System.Reflection.AssemblyVersion("4.9.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("20-7-2012 20:06:00")]

namespace MapWinControl
{
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{54f4c2f7-ed40-43b7-9d6f-e45965df7f95}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("MouseDownEvent")]
    [System.ComponentModel.ToolboxItem(true)]
    public class AxMap : System.Windows.Forms.AxHost {
        
        protected MapWinGIS._DMap ocx;
        
        protected AxMapEventMulticaster eventMulticaster;
        
        protected System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxMap() : 
                base("54f4c2f7-ed40-43b7-9d6f-e45965df7f95") {
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1)]
        [System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
        protected virtual System.Drawing.Color CtlBackColor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlBackColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return GetColorFromOleColor(((uint)(this.ocx.BackColor)));
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlBackColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.BackColor = ((uint)(GetOleColorFromColor(value)));
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(2)]
        protected virtual double ZoomPercent {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomPercent", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ZoomPercent;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomPercent", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ZoomPercent = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(3)]
        public virtual MapWinGIS.tkCursorMode CursorMode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CursorMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CursorMode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CursorMode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CursorMode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(4)]
        protected virtual MapWinGIS.tkCursor MapCursor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapCursor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MapCursor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapCursor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MapCursor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(5)]
        protected virtual int UDCursorHandle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UDCursorHandle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.UDCursorHandle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UDCursorHandle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.UDCursorHandle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(6)]
        protected virtual bool SendMouseDown {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendMouseDown", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SendMouseDown;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendMouseDown", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SendMouseDown = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        protected virtual bool SendMouseUp {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendMouseUp", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SendMouseUp;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendMouseUp", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SendMouseUp = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        protected virtual bool SendMouseMove {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendMouseMove", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SendMouseMove;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendMouseMove", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SendMouseMove = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        protected virtual bool SendSelectBoxDrag {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendSelectBoxDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SendSelectBoxDrag;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendSelectBoxDrag", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SendSelectBoxDrag = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(10)]
        protected virtual bool SendSelectBoxFinal {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendSelectBoxFinal", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SendSelectBoxFinal;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendSelectBoxFinal", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SendSelectBoxFinal = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(11)]
        protected virtual double ExtentPad {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExtentPad", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ExtentPad;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExtentPad", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ExtentPad = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(12)]
        protected virtual int ExtentHistory {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExtentHistory", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ExtentHistory;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ExtentHistory", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ExtentHistory = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(13)]
        protected virtual string Key {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Key", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Key;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Key", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Key = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(14)]
        protected virtual bool DoubleBuffer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DoubleBuffer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DoubleBuffer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DoubleBuffer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DoubleBuffer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(15)]
        protected virtual object GlobalCallback {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GlobalCallback", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GlobalCallback;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GlobalCallback", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GlobalCallback = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(16)]
        protected virtual int NumLayers {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("NumLayers", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.NumLayers;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("NumLayers", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.NumLayers = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(17)]
        protected virtual object Extents {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Extents", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Extents;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Extents", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Extents = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(18)]
        protected virtual int LastErrorCode {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LastErrorCode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LastErrorCode;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LastErrorCode", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.LastErrorCode = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(19)]
        protected virtual MapWinGIS.tkLockMode IsLocked {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsLocked", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.IsLocked;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsLocked", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.IsLocked = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(20)]
        protected virtual string MapState {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapState", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MapState;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapState", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MapState = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(95)]
        protected virtual string SerialNumber {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SerialNumber", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SerialNumber;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SerialNumber", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SerialNumber = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(96)]
        protected virtual int LineSeparationFactor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LineSeparationFactor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.LineSeparationFactor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LineSeparationFactor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.LineSeparationFactor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(118)]
        protected virtual bool SendOnDrawBackBuffer {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendOnDrawBackBuffer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.SendOnDrawBackBuffer;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendOnDrawBackBuffer", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.SendOnDrawBackBuffer = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(133)]
        protected virtual bool MultilineLabels {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultilineLabels", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MultilineLabels;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MultilineLabels", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MultilineLabels = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(151)]
        protected virtual bool UseSeamlessPan {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UseSeamlessPan", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.UseSeamlessPan;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UseSeamlessPan", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.UseSeamlessPan = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(152)]
        protected virtual double MouseWheelSpeed {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseWheelSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MouseWheelSpeed;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MouseWheelSpeed", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MouseWheelSpeed = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(154)]
        protected virtual MapWinGIS.tkShapeDrawingMethod ShapeDrawingMethod {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShapeDrawingMethod", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShapeDrawingMethod;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShapeDrawingMethod", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShapeDrawingMethod = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(156)]
        protected virtual double CurrentScale {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CurrentScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CurrentScale;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CurrentScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CurrentScale = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(158)]
        protected virtual MapWinGIS.tkUnitsOfMeasure MapUnits {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapUnits", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MapUnits;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapUnits", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MapUnits = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(166)]
        protected virtual int VersionNumber {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VersionNumber", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.VersionNumber;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("VersionNumber", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.VersionNumber = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(172)]
        protected virtual bool ShowRedrawTime {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowRedrawTime", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowRedrawTime;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowRedrawTime", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowRedrawTime = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(173)]
        protected virtual bool ShowVersionNumber {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowVersionNumber", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ShowVersionNumber;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowVersionNumber", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ShowVersionNumber = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(187)]
        protected virtual MapWinGIS.Extents MaxExtents {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MaxExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MaxExtents;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MaxExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MaxExtents = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(188)]
        protected virtual double PixelsPerDegree {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PixelsPerDegree", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.PixelsPerDegree;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PixelsPerDegree", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PixelsPerDegree = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(191)]
        protected virtual MapWinGIS.Tiles Tiles {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Tiles", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Tiles;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Tiles", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Tiles = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(192)]
        protected virtual object GeoProjection {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GeoProjection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GeoProjection;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GeoProjection", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.GeoProjection = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(195)]
        protected virtual bool ScalebarVisible {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScalebarVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.ScalebarVisible;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ScalebarVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.ScalebarVisible = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(108)]
        protected virtual MapWinGIS.tkResizeBehavior MapResizeBehavior {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapResizeBehavior", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MapResizeBehavior;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapResizeBehavior", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MapResizeBehavior = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(148)]
        protected virtual bool TrapRMouseDown {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TrapRMouseDown", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.TrapRMouseDown;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TrapRMouseDown", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.TrapRMouseDown = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(149)]
        protected virtual bool DisableWaitCursor {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DisableWaitCursor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DisableWaitCursor;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DisableWaitCursor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.DisableWaitCursor = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(162)]
        protected virtual double MapRotationAngle {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapRotationAngle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MapRotationAngle;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MapRotationAngle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MapRotationAngle = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(165)]
        protected virtual bool CanUseImageGrouping {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CanUseImageGrouping", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CanUseImageGrouping;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CanUseImageGrouping", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CanUseImageGrouping = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(193)]
        protected virtual MapWinGIS.Extents GeographicExtents {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GeographicExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.GeographicExtents;
            }
        }

        public event _DMapEvents_MouseDownEventHandler MouseDownEvent;
        
        public event _DMapEvents_MouseUpEventHandler MouseUpEvent;
        
        public event _DMapEvents_MouseMoveEventHandler MouseMoveEvent;
        
        public event _DMapEvents_FileDroppedEventHandler FileDropped;
        
        public event _DMapEvents_SelectBoxFinalEventHandler SelectBoxFinal;
        
        public event _DMapEvents_SelectBoxDragEventHandler SelectBoxDrag;
        
        public event System.EventHandler ExtentsChanged;
        
        public event _DMapEvents_MapStateEventHandler MapStateEvent;
        
        public event _DMapEvents_OnDrawBackBufferEventHandler OnDrawBackBuffer;
        
        public event _DMapEvents_ShapeHighlightedEventHandler ShapeHighlighted;
        
        public event _DMapEvents_BeforeDrawingEventHandler BeforeDrawing;
        
        public event _DMapEvents_AfterDrawingEventHandler AfterDrawing;
        
        public event System.EventHandler DblClick;
        
        protected virtual void set_Image(int layerHandle, MapWinGIS.Image param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_Image", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_Image(layerHandle, param0);
        }
        
        protected virtual string SerializeLayer(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SerializeLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.SerializeLayer(layerHandle)));
            return returnValue;
        }
        
        protected virtual bool DeserializeLayer(int layerHandle, string newVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DeserializeLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.DeserializeLayer(layerHandle, newVal)));
            return returnValue;
        }
        
        protected virtual bool SaveMapState(string filename, bool relativePaths, bool overwrite) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveMapState", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SaveMapState(filename, relativePaths, overwrite)));
            return returnValue;
        }
        
        protected virtual bool LoadMapState(string filename, object callback) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadMapState", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.LoadMapState(filename, callback)));
            return returnValue;
        }
        
        protected virtual bool SaveLayerOptions(int layerHandle, string optionsName, bool overwrite, string description) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveLayerOptions", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SaveLayerOptions(layerHandle, optionsName, overwrite, description)));
            return returnValue;
        }
        
        protected virtual bool LoadLayerOptions(int layerHandle, string optionsName, ref string description) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LoadLayerOptions", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.LoadLayerOptions(layerHandle, optionsName, ref description)));
            return returnValue;
        }
        
        protected virtual string get_LayerDescription(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerDescription", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_LayerDescription(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_LayerDescription(int layerHandle, string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerDescription", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerDescription(layerHandle, param0);
        }
        
        protected virtual bool DeserializeMapState(string state, bool loadLayers, string basePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DeserializeMapState", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.DeserializeMapState(state, loadLayers, basePath)));
            return returnValue;
        }
        
        protected virtual string SerializeMapState(bool relativePaths, string basePath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SerializeMapState", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.SerializeMapState(relativePaths, basePath)));
            return returnValue;
        }
        
        protected virtual bool RemoveLayerOptions(int layerHandle, string optionsName) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RemoveLayerOptions", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.RemoveLayerOptions(layerHandle, optionsName)));
            return returnValue;
        }
        
        protected virtual bool get_LayerSkipOnSaving(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerSkipOnSaving", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_LayerSkipOnSaving(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_LayerSkipOnSaving(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerSkipOnSaving", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerSkipOnSaving(layerHandle, param0);
        }
        
        protected virtual string get_LayerFilename(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerFilename", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_LayerFilename(layerHandle)));
            return returnValue;
        }
        
        protected virtual bool ZoomToSelected(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomToSelected", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.ZoomToSelected(layerHandle)));
            return returnValue;
        }
        
        protected virtual bool SetGeographicExtents(MapWinGIS.Extents pVal) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetGeographicExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SetGeographicExtents(pVal)));
            return returnValue;
        }
        
        protected virtual bool AdjustLayerExtents(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AdjustLayerExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.AdjustLayerExtents(layerHandle)));
            return returnValue;
        }
        
        protected virtual object SnapShot3(double left, double right, double top, double bottom, int width) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SnapShot3", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.SnapShot3(left, right, top, bottom, width)));
            return returnValue;
        }
        
        protected virtual void DrawPolygonEx(int layerHandle, ref object xPoints, ref object yPoints, int numPoints, uint color, bool fill) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawPolygonEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawPolygonEx(layerHandle, ref xPoints, ref yPoints, numPoints, color, fill);
        }
        
        protected virtual bool SnapShotToDC(System.IntPtr hdc, MapWinGIS.Extents extents, int width) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SnapShotToDC", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SnapShotToDC(hdc, extents, width)));
            return returnValue;
        }
        
        protected virtual MapWinGIS.Labels get_DrawingLabels(int drawingLayerIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_DrawingLabels", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.Labels returnValue = ((MapWinGIS.Labels)(this.ocx.get_DrawingLabels(drawingLayerIndex)));
            return returnValue;
        }
        
        protected virtual void set_DrawingLabels(int drawingLayerIndex, MapWinGIS.Labels param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_DrawingLabels", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_DrawingLabels(drawingLayerIndex, param0);
        }
        
        protected virtual void DrawWideCircleEx(int layerHandle, double x, double y, double radius, uint color, bool fill, short outlineWidth) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawWideCircleEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawWideCircleEx(layerHandle, x, y, radius, color, fill, outlineWidth);
        }
        
        protected virtual void DrawWidePolygonEx(int layerHandle, ref object xPoints, ref object yPoints, int numPoints, uint color, bool fill, short outlineWidth) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawWidePolygonEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawWidePolygonEx(layerHandle, ref xPoints, ref yPoints, numPoints, color, fill, outlineWidth);
        }
        
        protected virtual MapWinGIS.Extents GetRotatedExtent() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetRotatedExtent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.Extents returnValue = ((MapWinGIS.Extents)(this.ocx.GetRotatedExtent()));
            return returnValue;
        }
        
        protected virtual MapWinGIS.Point GetBaseProjectionPoint(double rotX, double rotY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetBaseProjectionPoint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.Point returnValue = ((MapWinGIS.Point)(this.ocx.GetBaseProjectionPoint(rotX, rotY)));
            return returnValue;
        }
        
        protected virtual double get_LayerMaxVisibleScale(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerMaxVisibleScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.get_LayerMaxVisibleScale(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_LayerMaxVisibleScale(int layerHandle, double param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerMaxVisibleScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerMaxVisibleScale(layerHandle, param0);
        }
        
        protected virtual double get_LayerMinVisibleScale(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerMinVisibleScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            double returnValue = ((double)(this.ocx.get_LayerMinVisibleScale(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_LayerMinVisibleScale(int layerHandle, double param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerMinVisibleScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerMinVisibleScale(layerHandle, param0);
        }
        
        protected virtual bool get_LayerDynamicVisibility(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerDynamicVisibility", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_LayerDynamicVisibility(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_LayerDynamicVisibility(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerDynamicVisibility", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerDynamicVisibility(layerHandle, param0);
        }
        
        protected virtual void DrawBackBuffer(System.IntPtr hdc, int imageWidth, int imageHeight) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawBackBuffer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawBackBuffer(hdc, imageWidth, imageHeight);
        }
        
        protected virtual MapWinGIS.Labels get_LayerLabels(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerLabels", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.Labels returnValue = ((MapWinGIS.Labels)(this.ocx.get_LayerLabels(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_LayerLabels(int layerHandle, MapWinGIS.Labels param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerLabels", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerLabels(layerHandle, param0);
        }
        
        protected virtual MapWinGIS.Shapefile get_Shapefile(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_Shapefile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.Shapefile returnValue = ((MapWinGIS.Shapefile)(this.ocx.get_Shapefile(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_Shapefile(int layerHandle, MapWinGIS.Shapefile param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_Shapefile", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_Shapefile(layerHandle, param0);
        }
        
        protected virtual MapWinGIS.Image get_Image(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_Image", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.Image returnValue = ((MapWinGIS.Image)(this.ocx.get_Image(layerHandle)));
            return returnValue;
        }
        
        protected virtual System.Drawing.Color get_DrawingLabelsShadowColor(int drawHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_DrawingLabelsShadowColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            uint returnValue = ((uint)(this.ocx.get_DrawingLabelsShadowColor(drawHandle)));
            return GetColorFromOleColor(returnValue);
        }
        
        protected virtual void set_DrawingLabelsShadowColor(int drawHandle, uint param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_DrawingLabelsShadowColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_DrawingLabelsShadowColor(drawHandle, param0);
        }
        
        protected virtual bool get_UseDrawingLabelCollision(int drawHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_UseDrawingLabelCollision", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_UseDrawingLabelCollision(drawHandle)));
            return returnValue;
        }
        
        protected virtual void set_UseDrawingLabelCollision(int drawHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_UseDrawingLabelCollision", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_UseDrawingLabelCollision(drawHandle, param0);
        }
        
        protected virtual bool get_DrawingLabelsVisible(int drawHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_DrawingLabelsVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_DrawingLabelsVisible(drawHandle)));
            return returnValue;
        }
        
        protected virtual void set_DrawingLabelsVisible(int drawHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_DrawingLabelsVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_DrawingLabelsVisible(drawHandle, param0);
        }
        
        protected virtual void GetDrawingStandardViewWidth(int drawHandle, ref double width) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetDrawingStandardViewWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.GetDrawingStandardViewWidth(drawHandle, ref width);
        }
        
        protected virtual void SetDrawingStandardViewWidth(int drawHandle, double width) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetDrawingStandardViewWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetDrawingStandardViewWidth(drawHandle, width);
        }
        
        protected virtual void DrawWidePolygon(ref object xPoints, ref object yPoints, int numPoints, uint color, bool fill, short width) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawWidePolygon", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawWidePolygon(ref xPoints, ref yPoints, numPoints, color, fill, width);
        }
        
        protected virtual void DrawWideCircle(double x, double y, double pixelRadius, uint color, bool fill, short width) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawWideCircle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawWideCircle(x, y, pixelRadius, color, fill, width);
        }
        
        protected virtual object SnapShot2(int clippingLayerNbr, double zoom, int pWidth) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SnapShot2", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.SnapShot2(clippingLayerNbr, zoom, pWidth)));
            return returnValue;
        }
        
        protected virtual void LayerFontEx(int layerHandle, string fontName, int fontSize, bool isBold, bool isItalic, bool isUnderline) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LayerFontEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LayerFontEx(layerHandle, fontName, fontSize, isBold, isItalic, isUnderline);
        }
        
        protected virtual void set_UDPointFontCharFont(int layerHandle, string fontName, float fontSize, bool isBold, bool isItalic, bool isUnderline) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_UDPointFontCharFont", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_UDPointFontCharFont(layerHandle, fontName, fontSize, isBold, isItalic, isUnderline);
        }
        
        protected virtual int set_UDPointFontCharListAdd(int layerHandle, int newValue, uint color) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_UDPointFontCharListAdd", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.set_UDPointFontCharListAdd(layerHandle, newValue, color)));
            return returnValue;
        }
        
        protected virtual void set_UDPointFontCharFontSize(int layerHandle, float fontSize) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_UDPointFontCharFontSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_UDPointFontCharFontSize(layerHandle, fontSize);
        }
        
        protected virtual int get_ShapePointFontCharListID(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapePointFontCharListID", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ShapePointFontCharListID(layerHandle, shape)));
            return returnValue;
        }
        
        protected virtual void set_ShapePointFontCharListID(int layerHandle, int shape, int param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapePointFontCharListID", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapePointFontCharListID(layerHandle, shape, param0);
        }
        
        protected virtual void ReSourceLayer(int layerHandle, string newSrcPath) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ReSourceLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ReSourceLayer(layerHandle, newSrcPath);
        }
        
        protected virtual System.Drawing.Color get_ShapeLayerStippleColor(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerStippleColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            uint returnValue = ((uint)(this.ocx.get_ShapeLayerStippleColor(layerHandle)));
            return GetColorFromOleColor(returnValue);
        }
        
        protected virtual void set_ShapeLayerStippleColor(int layerHandle, uint param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerStippleColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerStippleColor(layerHandle, param0);
        }
        
        protected virtual System.Drawing.Color get_ShapeStippleColor(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeStippleColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            uint returnValue = ((uint)(this.ocx.get_ShapeStippleColor(layerHandle, shape)));
            return GetColorFromOleColor(returnValue);
        }
        
        protected virtual void set_ShapeStippleColor(int layerHandle, int shape, uint param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeStippleColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeStippleColor(layerHandle, shape, param0);
        }
        
        protected virtual bool get_ShapeStippleTransparent(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeStippleTransparent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ShapeStippleTransparent(layerHandle, shape)));
            return returnValue;
        }
        
        protected virtual void set_ShapeStippleTransparent(int layerHandle, int shape, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeStippleTransparent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeStippleTransparent(layerHandle, shape, param0);
        }
        
        protected virtual bool get_ShapeLayerStippleTransparent(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerStippleTransparent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ShapeLayerStippleTransparent(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_ShapeLayerStippleTransparent(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerStippleTransparent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerStippleTransparent(layerHandle, param0);
        }
        
        protected virtual void set_UseLabelCollision(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_UseLabelCollision", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_UseLabelCollision(layerHandle, param0);
        }
        
        protected virtual bool IsTIFFGrid(string filename) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsTIFFGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.IsTIFFGrid(filename)));
            return returnValue;
        }
        
        protected virtual bool IsSameProjection(string proj4_a, string proj4_b) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("IsSameProjection", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.IsSameProjection(proj4_a, proj4_b)));
            return returnValue;
        }
        
        protected virtual void ZoomToMaxVisibleExtents() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomToMaxVisibleExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZoomToMaxVisibleExtents();
        }
        
        protected virtual int HWnd() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("HWnd", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.HWnd()));
            return returnValue;
        }
        
        protected virtual int set_UDPointImageListAdd(int layerHandle, object newValue) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_UDPointImageListAdd", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.set_UDPointImageListAdd(layerHandle, newValue)));
            return returnValue;
        }
        
        protected virtual int get_ShapePointImageListID(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapePointImageListID", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_ShapePointImageListID(layerHandle, shape)));
            return returnValue;
        }
        
        protected virtual void set_ShapePointImageListID(int layerHandle, int shape, int param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapePointImageListID", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapePointImageListID(layerHandle, shape, param0);
        }
        
        protected virtual int get_UDPointImageListCount(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_UDPointImageListCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_UDPointImageListCount(layerHandle)));
            return returnValue;
        }
        
        protected virtual object get_UDPointImageListItem(int layerHandle, int imageIndex) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_UDPointImageListItem", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.get_UDPointImageListItem(layerHandle, imageIndex)));
            return returnValue;
        }
        
        protected virtual void ClearUDPointImageList(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearUDPointImageList", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearUDPointImageList(layerHandle);
        }
        
        protected virtual void DrawLineEx(int layerHandle, double x1, double y1, double x2, double y2, int pixelWidth, uint color) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawLineEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawLineEx(layerHandle, x1, y1, x2, y2, pixelWidth, color);
        }
        
        protected virtual void DrawPointEx(int layerHandle, double x, double y, int pixelSize, uint color) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawPointEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawPointEx(layerHandle, x, y, pixelSize, color);
        }
        
        protected virtual void DrawCircleEx(int layerHandle, double x, double y, double pixelRadius, uint color, bool fill) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawCircleEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawCircleEx(layerHandle, x, y, pixelRadius, color, fill);
        }
        
        protected virtual void LabelColor(int layerHandle, uint labelFontColor) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LabelColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LabelColor(layerHandle, labelFontColor);
        }
        
        protected virtual void SetDrawingLayerVisible(int layerHandle, bool visiable) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetDrawingLayerVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetDrawingLayerVisible(layerHandle, visiable);
        }
        
        protected virtual void ClearDrawingLabels(int drawHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearDrawingLabels", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearDrawingLabels(drawHandle);
        }
        
        protected virtual void DrawingFont(int drawHandle, string fontName, int fontSize) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawingFont", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawingFont(drawHandle, fontName, fontSize);
        }
        
        protected virtual void AddDrawingLabelEx(int drawHandle, string text, uint color, double x, double y, MapWinGIS.tkHJustification hJustification, double rotation) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddDrawingLabelEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AddDrawingLabelEx(drawHandle, text, color, x, y, hJustification, rotation);
        }
        
        protected virtual void AddDrawingLabel(int drawHandle, string text, uint color, double x, double y, MapWinGIS.tkHJustification hJustification) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddDrawingLabel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AddDrawingLabel(drawHandle, text, color, x, y, hJustification);
        }
        
        protected virtual int get_DrawingLabelsOffset(int drawHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_DrawingLabelsOffset", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_DrawingLabelsOffset(drawHandle)));
            return returnValue;
        }
        
        protected virtual void set_DrawingLabelsOffset(int drawHandle, int param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_DrawingLabelsOffset", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_DrawingLabelsOffset(drawHandle, param0);
        }
        
        protected virtual bool get_DrawingLabelsScale(int drawHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_DrawingLabelsScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_DrawingLabelsScale(drawHandle)));
            return returnValue;
        }
        
        protected virtual void set_DrawingLabelsScale(int drawHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_DrawingLabelsScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_DrawingLabelsScale(drawHandle, param0);
        }
        
        protected virtual bool get_DrawingLabelsShadow(int drawHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_DrawingLabelsShadow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_DrawingLabelsShadow(drawHandle)));
            return returnValue;
        }
        
        protected virtual void set_DrawingLabelsShadow(int drawHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_DrawingLabelsShadow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_DrawingLabelsShadow(drawHandle, param0);
        }
        
        protected virtual void set_ShapePointType(int layerHandle, int shape, MapWinGIS.tkPointType param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapePointType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapePointType(layerHandle, shape, param0);
        }
        
        protected virtual bool get_LayerLabelsVisible(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerLabelsVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_LayerLabelsVisible(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_LayerLabelsVisible(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerLabelsVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerLabelsVisible(layerHandle, param0);
        }
        
        protected virtual int get_UDLineStipple(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_UDLineStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_UDLineStipple(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_UDLineStipple(int layerHandle, int param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_UDLineStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_UDLineStipple(layerHandle, param0);
        }
        
        protected virtual int get_UDFillStipple(int layerHandle, int stippleRow) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_UDFillStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_UDFillStipple(layerHandle, stippleRow)));
            return returnValue;
        }
        
        protected virtual void set_UDFillStipple(int layerHandle, int stippleRow, int param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_UDFillStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_UDFillStipple(layerHandle, stippleRow, param0);
        }
        
        protected virtual object get_UDPointType(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_UDPointType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.get_UDPointType(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_UDPointType(int layerHandle, object param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_UDPointType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_UDPointType(layerHandle, param0);
        }
        
        protected virtual object get_GetObject(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_GetObject", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.get_GetObject(layerHandle)));
            return returnValue;
        }
        
        protected virtual string get_LayerName(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerName", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_LayerName(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_LayerName(int layerHandle, string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerName", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerName(layerHandle, param0);
        }
        
        protected virtual bool SetImageLayerColorScheme(int layerHandle, object colorScheme) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetImageLayerColorScheme", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SetImageLayerColorScheme(layerHandle, colorScheme)));
            return returnValue;
        }
        
        protected virtual string get_GridFileName(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_GridFileName", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_GridFileName(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_GridFileName(int layerHandle, string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_GridFileName", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_GridFileName(layerHandle, param0);
        }
        
        protected virtual void UpdateImage(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UpdateImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.UpdateImage(layerHandle);
        }
        
        protected virtual bool get_LayerLabelsShadow(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerLabelsShadow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_LayerLabelsShadow(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_LayerLabelsShadow(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerLabelsShadow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerLabelsShadow(layerHandle, param0);
        }
        
        protected virtual bool get_LayerLabelsScale(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerLabelsScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_LayerLabelsScale(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_LayerLabelsScale(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerLabelsScale", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerLabelsScale(layerHandle, param0);
        }
        
        protected virtual void AddLabelEx(int layerHandle, string text, uint color, double x, double y, MapWinGIS.tkHJustification hJustification, double rotation) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddLabelEx", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AddLabelEx(layerHandle, text, color, x, y, hJustification, rotation);
        }
        
        protected virtual void GetLayerStandardViewWidth(int layerHandle, ref double width) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetLayerStandardViewWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.GetLayerStandardViewWidth(layerHandle, ref width);
        }
        
        protected virtual void SetLayerStandardViewWidth(int layerHandle, double width) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetLayerStandardViewWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetLayerStandardViewWidth(layerHandle, width);
        }
        
        protected virtual int get_LayerLabelsOffset(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerLabelsOffset", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_LayerLabelsOffset(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_LayerLabelsOffset(int layerHandle, int param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerLabelsOffset", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerLabelsOffset(layerHandle, param0);
        }
        
        protected virtual System.Drawing.Color get_LayerLabelsShadowColor(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerLabelsShadowColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            uint returnValue = ((uint)(this.ocx.get_LayerLabelsShadowColor(layerHandle)));
            return GetColorFromOleColor(returnValue);
        }
        
        protected virtual void set_LayerLabelsShadowColor(int layerHandle, uint param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerLabelsShadowColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerLabelsShadowColor(layerHandle, param0);
        }
        
        protected virtual bool get_UseLabelCollision(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_UseLabelCollision", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_UseLabelCollision(layerHandle)));
            return returnValue;
        }
        
        protected virtual float get_ShapeLineWidth(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLineWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            float returnValue = ((float)(this.ocx.get_ShapeLineWidth(layerHandle, shape)));
            return returnValue;
        }
        
        protected virtual void set_ShapeLineWidth(int layerHandle, int shape, float param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLineWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLineWidth(layerHandle, shape, param0);
        }
        
        protected virtual float get_ShapeLayerPointSize(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerPointSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            float returnValue = ((float)(this.ocx.get_ShapeLayerPointSize(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_ShapeLayerPointSize(int layerHandle, float param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerPointSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerPointSize(layerHandle, param0);
        }
        
        protected virtual float get_ShapePointSize(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapePointSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            float returnValue = ((float)(this.ocx.get_ShapePointSize(layerHandle, shape)));
            return returnValue;
        }
        
        protected virtual void set_ShapePointSize(int layerHandle, int shape, float param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapePointSize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapePointSize(layerHandle, shape, param0);
        }
        
        protected virtual float get_ShapeLayerFillTransparency(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerFillTransparency", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            float returnValue = ((float)(this.ocx.get_ShapeLayerFillTransparency(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_ShapeLayerFillTransparency(int layerHandle, float param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerFillTransparency", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerFillTransparency(layerHandle, param0);
        }
        
        protected virtual float get_ShapeFillTransparency(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeFillTransparency", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            float returnValue = ((float)(this.ocx.get_ShapeFillTransparency(layerHandle, shape)));
            return returnValue;
        }
        
        protected virtual void set_ShapeFillTransparency(int layerHandle, int shape, float param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeFillTransparency", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeFillTransparency(layerHandle, shape, param0);
        }
        
        protected virtual MapWinGIS.tkLineStipple get_ShapeLayerLineStipple(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerLineStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.tkLineStipple returnValue = ((MapWinGIS.tkLineStipple)(this.ocx.get_ShapeLayerLineStipple(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_ShapeLayerLineStipple(int layerHandle, MapWinGIS.tkLineStipple param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerLineStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerLineStipple(layerHandle, param0);
        }
        
        protected virtual MapWinGIS.tkLineStipple get_ShapeLineStipple(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLineStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.tkLineStipple returnValue = ((MapWinGIS.tkLineStipple)(this.ocx.get_ShapeLineStipple(layerHandle, shape)));
            return returnValue;
        }
        
        protected virtual void set_ShapeLineStipple(int layerHandle, int shape, MapWinGIS.tkLineStipple param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLineStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLineStipple(layerHandle, shape, param0);
        }
        
        protected virtual MapWinGIS.tkFillStipple get_ShapeLayerFillStipple(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerFillStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.tkFillStipple returnValue = ((MapWinGIS.tkFillStipple)(this.ocx.get_ShapeLayerFillStipple(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_ShapeLayerFillStipple(int layerHandle, MapWinGIS.tkFillStipple param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerFillStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerFillStipple(layerHandle, param0);
        }
        
        protected virtual MapWinGIS.tkFillStipple get_ShapeFillStipple(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeFillStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.tkFillStipple returnValue = ((MapWinGIS.tkFillStipple)(this.ocx.get_ShapeFillStipple(layerHandle, shape)));
            return returnValue;
        }
        
        protected virtual void set_ShapeFillStipple(int layerHandle, int shape, MapWinGIS.tkFillStipple param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeFillStipple", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeFillStipple(layerHandle, shape, param0);
        }
        
        protected virtual bool get_ShapeVisible(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ShapeVisible(layerHandle, shape)));
            return returnValue;
        }
        
        protected virtual void set_ShapeVisible(int layerHandle, int shape, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeVisible(layerHandle, shape, param0);
        }
        
        protected virtual float get_ImageLayerPercentTransparent(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ImageLayerPercentTransparent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            float returnValue = ((float)(this.ocx.get_ImageLayerPercentTransparent(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_ImageLayerPercentTransparent(int layerHandle, float param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ImageLayerPercentTransparent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ImageLayerPercentTransparent(layerHandle, param0);
        }
        
        protected virtual string get_ErrorMsg(int errorCode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ErrorMsg", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_ErrorMsg(errorCode)));
            return returnValue;
        }
        
        protected virtual string get_DrawingKey(int drawHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_DrawingKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_DrawingKey(drawHandle)));
            return returnValue;
        }
        
        protected virtual void set_DrawingKey(int drawHandle, string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_DrawingKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_DrawingKey(drawHandle, param0);
        }
        
        protected virtual MapWinGIS.tkPointType get_ShapeLayerPointType(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerPointType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.tkPointType returnValue = ((MapWinGIS.tkPointType)(this.ocx.get_ShapeLayerPointType(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_ShapeLayerPointType(int layerHandle, MapWinGIS.tkPointType param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerPointType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerPointType(layerHandle, param0);
        }
        
        protected virtual MapWinGIS.tkPointType get_ShapePointType(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapePointType", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            MapWinGIS.tkPointType returnValue = ((MapWinGIS.tkPointType)(this.ocx.get_ShapePointType(layerHandle, shape)));
            return returnValue;
        }
        
        protected virtual bool get_LayerVisible(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_LayerVisible(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_LayerVisible(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerVisible", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerVisible(layerHandle, param0);
        }
        
        protected virtual System.Drawing.Color get_ShapeLayerFillColor(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerFillColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            uint returnValue = ((uint)(this.ocx.get_ShapeLayerFillColor(layerHandle)));
            return GetColorFromOleColor(returnValue);
        }
        
        protected virtual void set_ShapeLayerFillColor(int layerHandle, uint param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerFillColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerFillColor(layerHandle, param0);
        }
        
        protected virtual System.Drawing.Color get_ShapeFillColor(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeFillColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            uint returnValue = ((uint)(this.ocx.get_ShapeFillColor(layerHandle, shape)));
            return GetColorFromOleColor(returnValue);
        }
        
        protected virtual void set_ShapeFillColor(int layerHandle, int shape, uint param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeFillColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeFillColor(layerHandle, shape, param0);
        }
        
        protected virtual System.Drawing.Color get_ShapeLayerLineColor(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerLineColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            uint returnValue = ((uint)(this.ocx.get_ShapeLayerLineColor(layerHandle)));
            return GetColorFromOleColor(returnValue);
        }
        
        protected virtual void set_ShapeLayerLineColor(int layerHandle, uint param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerLineColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerLineColor(layerHandle, param0);
        }
        
        protected virtual System.Drawing.Color get_ShapeLineColor(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLineColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            uint returnValue = ((uint)(this.ocx.get_ShapeLineColor(layerHandle, shape)));
            return GetColorFromOleColor(returnValue);
        }
        
        protected virtual void set_ShapeLineColor(int layerHandle, int shape, uint param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLineColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLineColor(layerHandle, shape, param0);
        }
        
        protected virtual System.Drawing.Color get_ShapeLayerPointColor(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerPointColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            uint returnValue = ((uint)(this.ocx.get_ShapeLayerPointColor(layerHandle)));
            return GetColorFromOleColor(returnValue);
        }
        
        protected virtual void set_ShapeLayerPointColor(int layerHandle, uint param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerPointColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerPointColor(layerHandle, param0);
        }
        
        protected virtual System.Drawing.Color get_ShapePointColor(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapePointColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            uint returnValue = ((uint)(this.ocx.get_ShapePointColor(layerHandle, shape)));
            return GetColorFromOleColor(returnValue);
        }
        
        protected virtual void set_ShapePointColor(int layerHandle, int shape, uint param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapePointColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapePointColor(layerHandle, shape, param0);
        }
        
        protected virtual bool get_ShapeLayerDrawFill(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerDrawFill", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ShapeLayerDrawFill(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_ShapeLayerDrawFill(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerDrawFill", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerDrawFill(layerHandle, param0);
        }
        
        protected virtual bool get_ShapeDrawFill(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeDrawFill", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ShapeDrawFill(layerHandle, shape)));
            return returnValue;
        }
        
        protected virtual void set_ShapeDrawFill(int layerHandle, int shape, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeDrawFill", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeDrawFill(layerHandle, shape, param0);
        }
        
        protected virtual bool get_ShapeLayerDrawLine(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerDrawLine", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ShapeLayerDrawLine(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_ShapeLayerDrawLine(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerDrawLine", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerDrawLine(layerHandle, param0);
        }
        
        protected virtual bool get_ShapeDrawLine(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeDrawLine", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ShapeDrawLine(layerHandle, shape)));
            return returnValue;
        }
        
        protected virtual void set_ShapeDrawLine(int layerHandle, int shape, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeDrawLine", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeDrawLine(layerHandle, shape, param0);
        }
        
        protected virtual bool get_ShapeLayerDrawPoint(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerDrawPoint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ShapeLayerDrawPoint(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_ShapeLayerDrawPoint(int layerHandle, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerDrawPoint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerDrawPoint(layerHandle, param0);
        }
        
        protected virtual bool get_ShapeDrawPoint(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeDrawPoint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.get_ShapeDrawPoint(layerHandle, shape)));
            return returnValue;
        }
        
        protected virtual void set_ShapeDrawPoint(int layerHandle, int shape, bool param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeDrawPoint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeDrawPoint(layerHandle, shape, param0);
        }
        
        protected virtual float get_ShapeLayerLineWidth(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_ShapeLayerLineWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            float returnValue = ((float)(this.ocx.get_ShapeLayerLineWidth(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_ShapeLayerLineWidth(int layerHandle, float param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_ShapeLayerLineWidth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_ShapeLayerLineWidth(layerHandle, param0);
        }
        
        protected virtual void ZoomToMaxExtents() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomToMaxExtents", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZoomToMaxExtents();
        }
        
        protected virtual void ZoomToLayer(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomToLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZoomToLayer(layerHandle);
        }
        
        protected virtual void ZoomToShape(int layerHandle, int shape) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomToShape", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZoomToShape(layerHandle, shape);
        }
        
        protected virtual void ZoomIn(double percent) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomIn", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZoomIn(percent);
        }
        
        protected virtual void ZoomOut(double percent) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomOut", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ZoomOut(percent);
        }
        
        protected virtual int ZoomToPrev() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ZoomToPrev", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.ZoomToPrev()));
            return returnValue;
        }
        
        protected virtual void ProjToPixel(double projX, double projY, ref double pixelX, ref double pixelY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ProjToPixel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ProjToPixel(projX, projY, ref pixelX, ref pixelY);
        }
        
        protected virtual void PixelToProj(double pixelX, double pixelY, ref double projX, ref double projY) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PixelToProj", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.PixelToProj(pixelX, pixelY, ref projX, ref projY);
        }
        
        protected virtual void ClearDrawing(int drawHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearDrawing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearDrawing(drawHandle);
        }
        
        protected virtual void ClearDrawings() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearDrawings", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearDrawings();
        }
        
        protected virtual object SnapShot(object boundBox) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SnapShot", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.SnapShot(boundBox)));
            return returnValue;
        }
        
        protected virtual bool ApplyLegendColors(object legend) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ApplyLegendColors", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.ApplyLegendColors(legend)));
            return returnValue;
        }
        
        protected virtual void LockWindow(MapWinGIS.tkLockMode lockMode) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LockWindow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LockWindow(lockMode);
        }
        
        protected virtual void Resize(int width, int height) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Resize", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Resize(width, height);
        }
        
        protected virtual void ShowToolTip(string text, int milliseconds) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowToolTip", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ShowToolTip(text, milliseconds);
        }
        
        protected virtual void AddLabel(int layerHandle, string text, uint color, double x, double y, MapWinGIS.tkHJustification hJustification) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddLabel", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AddLabel(layerHandle, text, color, x, y, hJustification);
        }
        
        protected virtual void ClearLabels(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearLabels", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearLabels(layerHandle);
        }
        
        protected virtual void LayerFont(int layerHandle, string fontName, int fontSize) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("LayerFont", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.LayerFont(layerHandle, fontName, fontSize);
        }
        
        protected virtual object GetColorScheme(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetColorScheme", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetColorScheme(layerHandle)));
            return returnValue;
        }
        
        protected virtual int NewDrawing(MapWinGIS.tkDrawReferenceList projection) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("NewDrawing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.NewDrawing(projection)));
            return returnValue;
        }
        
        protected virtual void DrawPoint(double x, double y, int pixelSize, uint color) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawPoint", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawPoint(x, y, pixelSize, color);
        }
        
        protected virtual void DrawLine(double x1, double y1, double x2, double y2, int pixelWidth, uint color) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawLine", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawLine(x1, y1, x2, y2, pixelWidth, color);
        }
        
        protected virtual void DrawCircle(double x, double y, double pixelRadius, uint color, bool fill) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawCircle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawCircle(x, y, pixelRadius, color, fill);
        }
        
        protected virtual void DrawPolygon(ref object xPoints, ref object yPoints, int numPoints, uint color, bool fill) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DrawPolygon", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.DrawPolygon(ref xPoints, ref yPoints, numPoints, color, fill);
        }
        
        protected virtual string get_LayerKey(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.get_LayerKey(layerHandle)));
            return returnValue;
        }
        
        protected virtual void set_LayerKey(int layerHandle, string param0) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("set_LayerKey", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.set_LayerKey(layerHandle, param0);
        }
        
        protected virtual int get_LayerPosition(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerPosition", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_LayerPosition(layerHandle)));
            return returnValue;
        }
        
        protected virtual int get_LayerHandle(int layerPosition) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("get_LayerHandle", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.get_LayerHandle(layerPosition)));
            return returnValue;
        }
        
        protected virtual void Redraw() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Redraw", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Redraw();
        }
        
        protected virtual int AddLayer(object @object, bool visible) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.AddLayer(@object, visible)));
            return returnValue;
        }
        
        protected virtual void RemoveLayer(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RemoveLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RemoveLayer(layerHandle);
        }
        
        protected virtual void RemoveLayerWithoutClosing(int layerHandle) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RemoveLayerWithoutClosing", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RemoveLayerWithoutClosing(layerHandle);
        }
        
        protected virtual void RemoveAllLayers() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RemoveAllLayers", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.RemoveAllLayers();
        }
        
        protected virtual bool MoveLayerUp(int initialPosition) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveLayerUp", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.MoveLayerUp(initialPosition)));
            return returnValue;
        }
        
        protected virtual bool MoveLayerDown(int initialPosition) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveLayerDown", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.MoveLayerDown(initialPosition)));
            return returnValue;
        }
        
        protected virtual bool MoveLayer(int initialPosition, int targetPosition) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveLayer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.MoveLayer(initialPosition, targetPosition)));
            return returnValue;
        }
        
        protected virtual bool MoveLayerTop(int initialPosition) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveLayerTop", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.MoveLayerTop(initialPosition)));
            return returnValue;
        }
        
        protected virtual bool MoveLayerBottom(int initialPosition) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MoveLayerBottom", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.MoveLayerBottom(initialPosition)));
            return returnValue;
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxMapEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MapWinGIS._DMapEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MapWinGIS._DMap)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnMouseDownEvent(object sender, _DMapEvents_MouseDownEvent e) {
            if ((this.MouseDownEvent != null)) {
                this.MouseDownEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseUpEvent(object sender, _DMapEvents_MouseUpEvent e) {
            if ((this.MouseUpEvent != null)) {
                this.MouseUpEvent(sender, e);
            }
        }
        
        internal void RaiseOnMouseMoveEvent(object sender, _DMapEvents_MouseMoveEvent e) {
            if ((this.MouseMoveEvent != null)) {
                this.MouseMoveEvent(sender, e);
            }
        }
        
        internal void RaiseOnFileDropped(object sender, _DMapEvents_FileDroppedEvent e) {
            if ((this.FileDropped != null)) {
                this.FileDropped(sender, e);
            }
        }
        
        internal void RaiseOnSelectBoxFinal(object sender, _DMapEvents_SelectBoxFinalEvent e) {
            if ((this.SelectBoxFinal != null)) {
                this.SelectBoxFinal(sender, e);
            }
        }
        
        internal void RaiseOnSelectBoxDrag(object sender, _DMapEvents_SelectBoxDragEvent e) {
            if ((this.SelectBoxDrag != null)) {
                this.SelectBoxDrag(sender, e);
            }
        }
        
        internal void RaiseOnExtentsChanged(object sender, System.EventArgs e) {
            if ((this.ExtentsChanged != null)) {
                this.ExtentsChanged(sender, e);
            }
        }
        
        internal void RaiseOnMapStateEvent(object sender, _DMapEvents_MapStateEvent e) {
            if ((this.MapStateEvent != null)) {
                this.MapStateEvent(sender, e);
            }
        }
        
        internal void RaiseOnOnDrawBackBuffer(object sender, _DMapEvents_OnDrawBackBufferEvent e) {
            if ((this.OnDrawBackBuffer != null)) {
                this.OnDrawBackBuffer(sender, e);
            }
        }
        
        internal void RaiseOnShapeHighlighted(object sender, _DMapEvents_ShapeHighlightedEvent e) {
            if ((this.ShapeHighlighted != null)) {
                this.ShapeHighlighted(sender, e);
            }
        }
        
        internal void RaiseOnBeforeDrawing(object sender, _DMapEvents_BeforeDrawingEvent e) {
            if ((this.BeforeDrawing != null)) {
                this.BeforeDrawing(sender, e);
            }
        }
        
        internal void RaiseOnAfterDrawing(object sender, _DMapEvents_AfterDrawingEvent e) {
            if ((this.AfterDrawing != null)) {
                this.AfterDrawing(sender, e);
            }
        }
        
        internal void RaiseOnDblClick(object sender, System.EventArgs e) {
            if ((this.DblClick != null)) {
                this.DblClick(sender, e);
            }
        }
    }
    
    public delegate void _DMapEvents_MouseDownEventHandler(object sender, _DMapEvents_MouseDownEvent e);
    
    public class _DMapEvents_MouseDownEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DMapEvents_MouseDownEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DMapEvents_MouseUpEventHandler(object sender, _DMapEvents_MouseUpEvent e);
    
    public class _DMapEvents_MouseUpEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DMapEvents_MouseUpEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DMapEvents_MouseMoveEventHandler(object sender, _DMapEvents_MouseMoveEvent e);
    
    public class _DMapEvents_MouseMoveEvent {
        
        public short button;
        
        public short shift;
        
        public int x;
        
        public int y;
        
        public _DMapEvents_MouseMoveEvent(short button, short shift, int x, int y) {
            this.button = button;
            this.shift = shift;
            this.x = x;
            this.y = y;
        }
    }
    
    public delegate void _DMapEvents_FileDroppedEventHandler(object sender, _DMapEvents_FileDroppedEvent e);
    
    public class _DMapEvents_FileDroppedEvent {
        
        public string filename;
        
        public _DMapEvents_FileDroppedEvent(string filename) {
            this.filename = filename;
        }
    }
    
    public delegate void _DMapEvents_SelectBoxFinalEventHandler(object sender, _DMapEvents_SelectBoxFinalEvent e);
    
    public class _DMapEvents_SelectBoxFinalEvent {
        
        public int left;
        
        public int right;
        
        public int bottom;
        
        public int top;
        
        public _DMapEvents_SelectBoxFinalEvent(int left, int right, int bottom, int top) {
            this.left = left;
            this.right = right;
            this.bottom = bottom;
            this.top = top;
        }
    }
    
    public delegate void _DMapEvents_SelectBoxDragEventHandler(object sender, _DMapEvents_SelectBoxDragEvent e);
    
    public class _DMapEvents_SelectBoxDragEvent {
        
        public int left;
        
        public int right;
        
        public int bottom;
        
        public int top;
        
        public _DMapEvents_SelectBoxDragEvent(int left, int right, int bottom, int top) {
            this.left = left;
            this.right = right;
            this.bottom = bottom;
            this.top = top;
        }
    }
    
    public delegate void _DMapEvents_MapStateEventHandler(object sender, _DMapEvents_MapStateEvent e);
    
    public class _DMapEvents_MapStateEvent {
        
        public int layerHandle;
        
        public _DMapEvents_MapStateEvent(int layerHandle) {
            this.layerHandle = layerHandle;
        }
    }
    
    public delegate void _DMapEvents_OnDrawBackBufferEventHandler(object sender, _DMapEvents_OnDrawBackBufferEvent e);
    
    public class _DMapEvents_OnDrawBackBufferEvent {
        
        public int backBuffer;
        
        public _DMapEvents_OnDrawBackBufferEvent(int backBuffer) {
            this.backBuffer = backBuffer;
        }
    }
    
    public delegate void _DMapEvents_ShapeHighlightedEventHandler(object sender, _DMapEvents_ShapeHighlightedEvent e);
    
    public class _DMapEvents_ShapeHighlightedEvent {
        
        public int layerHandle;
        
        public int shapeIndex;
        
        public _DMapEvents_ShapeHighlightedEvent(int layerHandle, int shapeIndex) {
            this.layerHandle = layerHandle;
            this.shapeIndex = shapeIndex;
        }
    }
    
    public delegate void _DMapEvents_BeforeDrawingEventHandler(object sender, _DMapEvents_BeforeDrawingEvent e);
    
    public class _DMapEvents_BeforeDrawingEvent {
        
        public int hdc;
        
        public int xMin;
        
        public int xMax;
        
        public int yMin;
        
        public int yMax;
        
        public bool handled;
        
        public _DMapEvents_BeforeDrawingEvent(int hdc, int xMin, int xMax, int yMin, int yMax, bool handled) {
            this.hdc = hdc;
            this.xMin = xMin;
            this.xMax = xMax;
            this.yMin = yMin;
            this.yMax = yMax;
            this.handled = handled;
        }
    }
    
    public delegate void _DMapEvents_AfterDrawingEventHandler(object sender, _DMapEvents_AfterDrawingEvent e);
    
    public class _DMapEvents_AfterDrawingEvent {
        
        public int hdc;
        
        public int xMin;
        
        public int xMax;
        
        public int yMin;
        
        public int yMax;
        
        public bool handled;
        
        public _DMapEvents_AfterDrawingEvent(int hdc, int xMin, int xMax, int yMin, int yMax, bool handled) {
            this.hdc = hdc;
            this.xMin = xMin;
            this.xMax = xMax;
            this.yMin = yMin;
            this.yMax = yMax;
            this.handled = handled;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxMapEventMulticaster : MapWinGIS._DMapEvents {
        
        private AxMap parent;
        
        public AxMapEventMulticaster(AxMap parent) {
            this.parent = parent;
        }
        
        public virtual void MouseDown(short button, short shift, int x, int y) {
            _DMapEvents_MouseDownEvent mousedownEvent = new _DMapEvents_MouseDownEvent(button, shift, x, y);
            this.parent.RaiseOnMouseDownEvent(this.parent, mousedownEvent);
        }
        
        public virtual void MouseUp(short button, short shift, int x, int y) {
            _DMapEvents_MouseUpEvent mouseupEvent = new _DMapEvents_MouseUpEvent(button, shift, x, y);
            this.parent.RaiseOnMouseUpEvent(this.parent, mouseupEvent);
        }
        
        public virtual void MouseMove(short button, short shift, int x, int y) {
            _DMapEvents_MouseMoveEvent mousemoveEvent = new _DMapEvents_MouseMoveEvent(button, shift, x, y);
            this.parent.RaiseOnMouseMoveEvent(this.parent, mousemoveEvent);
        }
        
        public virtual void FileDropped(string filename) {
            _DMapEvents_FileDroppedEvent filedroppedEvent = new _DMapEvents_FileDroppedEvent(filename);
            this.parent.RaiseOnFileDropped(this.parent, filedroppedEvent);
        }
        
        public virtual void SelectBoxFinal(int left, int right, int bottom, int top) {
            _DMapEvents_SelectBoxFinalEvent selectboxfinalEvent = new _DMapEvents_SelectBoxFinalEvent(left, right, bottom, top);
            this.parent.RaiseOnSelectBoxFinal(this.parent, selectboxfinalEvent);
        }
        
        public virtual void SelectBoxDrag(int left, int right, int bottom, int top) {
            _DMapEvents_SelectBoxDragEvent selectboxdragEvent = new _DMapEvents_SelectBoxDragEvent(left, right, bottom, top);
            this.parent.RaiseOnSelectBoxDrag(this.parent, selectboxdragEvent);
        }
        
        public virtual void ExtentsChanged() {
            System.EventArgs extentschangedEvent = new System.EventArgs();
            this.parent.RaiseOnExtentsChanged(this.parent, extentschangedEvent);
        }
        
        public virtual void MapState(int layerHandle) {
            _DMapEvents_MapStateEvent mapstateEvent = new _DMapEvents_MapStateEvent(layerHandle);
            this.parent.RaiseOnMapStateEvent(this.parent, mapstateEvent);
        }
        
        public virtual void OnDrawBackBuffer(int backBuffer) {
            _DMapEvents_OnDrawBackBufferEvent ondrawbackbufferEvent = new _DMapEvents_OnDrawBackBufferEvent(backBuffer);
            this.parent.RaiseOnOnDrawBackBuffer(this.parent, ondrawbackbufferEvent);
        }
        
        public virtual void ShapeHighlighted(int layerHandle, int shapeIndex) {
            _DMapEvents_ShapeHighlightedEvent shapehighlightedEvent = new _DMapEvents_ShapeHighlightedEvent(layerHandle, shapeIndex);
            this.parent.RaiseOnShapeHighlighted(this.parent, shapehighlightedEvent);
        }
        
        public virtual void BeforeDrawing(int hdc, int xMin, int xMax, int yMin, int yMax, ref bool handled) {
            _DMapEvents_BeforeDrawingEvent beforedrawingEvent = new _DMapEvents_BeforeDrawingEvent(hdc, xMin, xMax, yMin, yMax, handled);
            this.parent.RaiseOnBeforeDrawing(this.parent, beforedrawingEvent);
            handled = beforedrawingEvent.handled;
        }
        
        public virtual void AfterDrawing(int hdc, int xMin, int xMax, int yMin, int yMax, ref bool handled) {
            _DMapEvents_AfterDrawingEvent afterdrawingEvent = new _DMapEvents_AfterDrawingEvent(hdc, xMin, xMax, yMin, yMax, handled);
            this.parent.RaiseOnAfterDrawing(this.parent, afterdrawingEvent);
            handled = afterdrawingEvent.handled;
        }
        
        public virtual void DblClick() {
            System.EventArgs dblclickEvent = new System.EventArgs();
            this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
        }
    }
}
